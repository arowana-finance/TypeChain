/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Counter, CounterInterface } from "../../Counter.sol/Counter";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "number",
        type: "uint256",
      },
    ],
    name: "CountedTo",
    type: "event",
  },
  {
    inputs: [],
    name: "countDown",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "countUp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526000805534801561001457600080fd5b5061064e806100246000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630bd8599e146100465780635fcbd5b614610064578063a87d942c14610082575b600080fd5b61004e6100a0565b60405161005b9190610459565b60405180910390f35b61006c610183565b6040516100799190610459565b60405180910390f35b61008a610266565b6040516100979190610459565b60405180910390f35b60006100e36040518060400160405280601081526020017f636f756e7455703a20636f756e74203d0000000000000000000000000000000081525060005461026f565b600060016000546100f49190610490565b9050600054811161013a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013190610439565b60405180910390fd5b806000819055507fa501f5a8ef1a812bff54fb3642cfaec066c351af1716c48a7bdd05e0bb631e676000546040516101729190610459565b60405180910390a160005491505090565b60006101c66040518060400160405280601281526020017f636f756e74446f776e3a20636f756e74203d000000000000000000000000000081525060005461026f565b600060016000546101d791906104e6565b9050600054811061021d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021490610419565b60405180910390fd5b806000819055507fa501f5a8ef1a812bff54fb3642cfaec066c351af1716c48a7bdd05e0bb631e676000546040516102559190610459565b60405180910390a160005491505090565b60008054905090565b61030782826040516024016102859291906103e9565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061030b565b5050565b6103228161031a610325610346565b63ffffffff16565b50565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b610351819050919050565b610359610586565b565b600061036682610474565b610370818561047f565b9350610380818560208601610524565b610389816105b5565b840191505092915050565b60006103a160118361047f565b91506103ac826105c6565b602082019050919050565b60006103c460108361047f565b91506103cf826105ef565b602082019050919050565b6103e38161051a565b82525050565b60006040820190508181036000830152610403818561035b565b905061041260208301846103da565b9392505050565b6000602082019050818103600083015261043281610394565b9050919050565b60006020820190508181036000830152610452816103b7565b9050919050565b600060208201905061046e60008301846103da565b92915050565b600081519050919050565b600082825260208201905092915050565b600061049b8261051a565b91506104a68361051a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156104db576104da610557565b5b828201905092915050565b60006104f18261051a565b91506104fc8361051a565b92508282101561050f5761050e610557565b5b828203905092915050565b6000819050919050565b60005b83811015610542578082015181840152602081019050610527565b83811115610551576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fd5b6000601f19601f8301169050919050565b7f55696e7432353620756e646572666c6f77000000000000000000000000000000600082015250565b7f55696e74323536206f766572666c6f770000000000000000000000000000000060008201525056fea2646970667358221220575ed64dc5d10963470ac5dcbd96d3421bcf14568350a9fdf8dc556f01cd983f64736f6c63430008070033";

type CounterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CounterConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Counter__factory extends ContractFactory {
  constructor(...args: CounterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Counter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Counter__factory {
    return super.connect(runner) as Counter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterInterface {
    return new Interface(_abi) as CounterInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Counter {
    return new Contract(address, _abi, runner) as unknown as Counter;
  }
}
